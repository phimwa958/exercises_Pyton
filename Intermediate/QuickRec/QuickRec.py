import sounddevice as sd
import numpy as np
import wave
import os
import time
import threading
from pynput import keyboard

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
SAMPLE_RATE = 44100  # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Hz)
CHANNELS = 1  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
DEVICE_ID = 1  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
recording = []
is_recording = False
recording_thread = None
file_index = 1  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå 01.wav
keys_pressed = set()  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏î

def get_filename():
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô 01.wav, 02.wav """
    global file_index
    while True:
        filename = f"{file_index:02d}.wav"
        if not os.path.exists(filename):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            return filename
        file_index += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡πÑ‡∏ü‡∏•‡πå

def record_audio():
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô thread """
    global is_recording, recording
    is_recording = True
    recording = []

    def callback(indata, frames, time, status):
        if status:
            print(f"‚ö† Warning: {status}", flush=True)
        if is_recording:
            recording.append(indata.copy())

    with sd.InputStream(samplerate=SAMPLE_RATE, channels=CHANNELS, device=DEVICE_ID, dtype='int16', callback=callback) as stream:
        while is_recording:
            time.sleep(0.1)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ CPU ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

    if recording:
        filename = get_filename()
        audio_data = np.concatenate(recording, axis=0)
        with wave.open(filename, 'wb') as wf:
            wf.setnchannels(CHANNELS)
            wf.setsampwidth(2)  # 16-bit PCM
            wf.setframerate(SAMPLE_RATE)
            wf.writeframes(audio_data.tobytes())
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à: {filename}")

def on_press(key):
    global is_recording, recording_thread, keys_pressed
    keys_pressed.add(key)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏î
    if keyboard.Key.alt_l in keys_pressed and keyboard.KeyCode.from_char('k') in keys_pressed:
        if not is_recording:
            print("üé§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...")
            recording_thread = threading.Thread(target=record_audio)
            recording_thread.start()

def on_release(key):
    global is_recording, recording_thread, keys_pressed
    if key in keys_pressed:
        keys_pressed.remove(key)  # ‡πÄ‡∏≠‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ï
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á Alt ‡πÅ‡∏•‡∏∞ K
    if keyboard.Key.alt_l not in keys_pressed and keyboard.KeyCode.from_char('k') not in keys_pressed:
        if is_recording:
            is_recording = False
            if recording_thread:
                recording_thread.join()  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            print("‚èπ ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
listener = keyboard.Listener(on_press=on_press, on_release=on_release)
listener.start()

print("üîÑ ‡∏Å‡∏î 'Alt + K' ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á... ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")

listener.join()
